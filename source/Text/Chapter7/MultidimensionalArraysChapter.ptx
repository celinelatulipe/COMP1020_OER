<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-mdas" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Multidimensional Arrays</title>

  <introduction>
    <p> Text before the first section. </p>
  </introduction>

  <!-- include sections 
  <xi:include href="sec-section-name.ptx" />-->
  
  <!-- Starter Exercise-->
  <section xml:id="sec-mdas-starter-exercise">
    <title>Starter Level</title>
    <block>
      <p>
        <alert>Multidimensional Arrays</alert>
      </p>
    </block>
    <!-- Objectives for Starter Exercise -->
    <objectives>
      <ul>
        <li>Learn to initialize and iterate through multi-dimensional arrays</li>
      </ul>
    </objectives>
    <!-- Overview for Starter Exercise -->
    <subsection xml:id="subsec-mdas-starter-overview">
      <title>Overview</title>
      <p>
        In this exercise, you will work with a Java program that simulates a restaurant menu. A 2D array stores multiple dishes,
        each of which are put in 3 different categories: appetizers, entrees, and desserts. You must implement <c>displayMenu</c>
        and <c>displayCategory</c>. These methods are responsible for displaying the entire menu and specific categories of the menu,
        respectively. 
      </p>
    </subsection>
    <!-- 2D Array for Starter Exercise -->
    <subsection xml:id="subsec-mdas-starter-2D-array">
      <title>2D Array</title>
      <p>
        The <c>menu</c> 2D array is an array of <c>String</c>, where each sub-array represents a category of the menu.  
        The first element of each sub-array is the name of the category.
        <ul>
          <li>
            <p>
              <c>menu[0][0]</c> contains "Appetizers", <c>menu[1][0]</c> contains "Entrees" and <c>menu[2][0]</c>
              contains "Desserts".
            </p>
          </li>
        </ul>
        The subsequent elements in each sub-array are the food items that belong to that category.
        <ul>
          <li>
            <p>
              For example, in the Entrees category, <c>menu[1][1]</c> is "Steak", <c>menu[1][2]</c> is "Stir-Fry" and
              <c>menu[1][3]</c> is "Porkchops".
            </p>
          </li>
        </ul>
        Here is a visual representation of the <c>menu</c> 2D array:
        <!-- 2D Array Displayed As A Table -->
        <table>
          <tabular halign="center">
            <row header="yes" bottom="minor">  
            </row>
            <row>
              <cell>Appetizers <c>menu[0][0]</c></cell>
              <cell>Deviled Eggs <c>menu[1][1]</c></cell>
              <cell>Nachos <c>menu[1][2]</c></cell>
              <cell>Salad <c>menu[1][3]</c></cell>
            </row>
            <row>
              <cell>Entrees <c>menu[1][0]</c></cell>
              <cell>Steak <c>menu[2][1]</c></cell>
              <cell>Stir-Fry <c>menu[2][2]</c></cell>
              <cell>Porkchops <c>menu[2][3]</c></cell>
            </row>
            <row>
              <cell>Dessert <c>menu[2][1]</c></cell>
              <cell>Key-Lime Pie <c>menu[3][1]</c></cell>
              <cell>Raspberry Tarts <c>menu[3][2]</c></cell>
              <cell>Sundae <c>menu[3][3]</c></cell>
            </row>
          </tabular>
        </table>       
      </p>
    </subsection>
    <!-- Instructions for Starter Exercise -->
    <subsection xml:id="subsec-mdas-starter-instructions">
      <title>Instructions</title>
      <ol>
        <li>
          <p>
            Implement the <c>displayMenu</c> method.
          </p>
          <ul>
            <li>
              <p>
                This method should iterate through the <c>menu</c> array and print all their categories along with their respective
                dishes.
              </p>
            </li>
            <li>
              <p>
                Each dish should be printed on a new line and each category should be visually separated in the output.
              </p>
            </li>
          </ul>
        </li>
        <li>
          <p>
            Implement the <c>displayCategory</c> method.
          </p>
          <ul>
            <li>
              <p>
                This method accepts the <c>menu</c> 2D array and an integer <c>category</c>, which represents the index of the 
                category to be displayed (0 for Appetizers, 1 for Entrees, 2 for Desserts).
              </p>
            </li>
            <li>
              <p>
                <c>displayCategory</c> will display the chosen category and its dishes in the same format similar to 
                <c>displayMenu</c>, but only for the specified category.
              </p>
            </li>
          </ul>
        </li>
      </ol>      
    </subsection>
    <!-- Template Code for Starter Exercise -->
    <program xml:id="mdas-starter-template" interactive="activecode" language="java">
      <input>
        public class RestaurantMenu {
          public static void main(String[] args) {
              
              String[][] menu = {
                  {"Appetizers", "Deviled Eggs", "Nachos", "Salad"},
                  {"Entrees", "Steak", "Stir-Fry", "Porkchops"},
                  {"Desserts", "Key-Lime Pie", "Raspberry Tarts", "Sundae"},
              };
          
              System.out.println("TEST: Printing menu...");
              displayMenu(menu); //Printing whole menu
              System.out.println("TEST: Printing entrees...");
              displayCategory(menu, 1); //Printing Entrees
          }
      
          public static void displayMenu(String[][] menu){
      
          }
      
          //0 - Appetizers, 1 - Entrees, 2 - Dessert
          public static void displayCategory(String[][] menu, int category){
          
          } 
      }
      </input>
    </program>
    <!-- Expected Output for Starter Exercise -->
    <p>
      The expected output is:
    </p>
    <program xml:id="mdas-starter-output" interactive="no">
      <input>
        -- Menu -- 
        Category: Appetizers
        Deviled Eggs
        Nachos
        Salad
        
        Category: Entrees
        Steak
        Stir-Fry
        Porkchops
        
        Category: Desserts
        Key-Lime Pie
        Raspberry Tarts
        Sundae
        
        TEST: Printing entrees...
        Category: Entrees
        Steak
        Stir-Fry
        Porkchops
      </input>
    </program>
  </section>


  <section xml:id="sec-mdas-growth-exercise">
    <title>Growth Level</title>
    <block>
      <p>
        <alert>Multidimensional Arrays</alert>
      </p>
    </block>

    <!-- Objectives for Growth Exercise -->
    <objectives>
      <ul>
        <li>Initialize, iterate, and manipulate elements within a 2D array</li>
      </ul>
    </objectives>

    <!-- Overview for Growth Exercise -->
    <subsection xml:id="subsec-mdas-growth-overview">
      <title>Overview</title>
      <p>
        This Java program simulates a reservation system for movie theater seats using a multidimensional array. 
        It is designed to manage the seats in a theater and it allows the user to check the availability of seats, 
        reserve specific seats, and display the seating layout. 
      </p>
    </subsection>

    <!-- 2D Array Explanation -->
    <subsection xml:id="subsec-mdas-growth-2D-array">
      <title>2D Array</title>
      <p>
        The 2D array <c>seats</c> represents the rows and columns of seats in a theater. 
        Here is the initialization of the array:
      </p>
      <!-- 2D Array Code, Non-Interactive -->
      <program xml:id="mdas-growth-2D-array-static" interactive="no">
        <input>
        String[][] seats = {
            {"OCCUPIED", "AVAILABLE", "OCCUPIED", "AVAILABLE"}, 
            {"AVAILABLE", "AVAILABLE", "OCCUPIED", "OCCUPIED"}, 
            {"OCCUPIED", "OCCUPIED", "AVAILABLE", "AVAILABLE"}
        };
        </input>
      </program>
      <ul>
        <li>
          <p>
            The array <c>seats</c> has 3 rows and 4 columns.
          </p>
        </li>
        <li>
          <p>
            Rows are indexed from 0 to 2 and columns within each row are indexed from 0 to 3.
          </p>
        </li>
        <li>
          <p>
            Each element in the array is a <c>String</c> that can either be <em>"AVAILABLE"</em> or <em>"OCCUPIED"</em>.
          </p>
        </li>
      </ul>
    </subsection>
    <!-- Instructions for Growth Exercise-->
    <subsection xml:id="subsec-mdas-growth-instructions">
      <title>Instructions</title>
      <ol>
        <li>
          <p>
            Implement <c>displaySeats(String[][] seats)</c>
            <ul>
              <li>
                <p>
                  The <c>displaySeats()</c> method prints out the entire seating arrangement and shows the current status of each seat.
                </p>
              </li>
              <li>
                <p>
                  Example output:
                </p>
                <!-- displaySeats Output, Non-Interactive -->
                <program xml:id="mdas-display-seats-output-static" interactive="no">
                  <input>
                    Seating Arrangement:
                    OCCUPIED        AVAILABLE       OCCUPIED        AVAILABLE
                    AVAILABLE       AVAILABLE       OCCUPIED        OCCUPIED
                    OCCUPIED        OCCUPIED        AVAILABLE       AVAILABLE
                  </input>
                </program>
              </li>
            </ul>
          </p>
        </li>
        <li>
          <p>
            Implement <c>checkSeats(String[][] seats)</c>
            <ul>
              <li>
                <p>
                  The <c>checkSeats()</c> method checks and displays the number of available seats in each row
                  and the total number of available seats in the entire theater.
                </p>
              </li>
              <li>
                <p>
                  It iterates through each row and each seat within the row to count the number of <em>"AVAILABLE"</em> seats.                   
                </p>
              </li>
              <li>
                <p>
                  Example output:
                </p>
                <!-- checkSeats Output, Non-Interactive -->
                <program xml:id="mdas-check-seats-output-static" interactive="no">
                  <input>
                    Row 1 has 2 available seats.
                    Row 2 has 2 available seats.
                    Row 3 has 2 available seats.
                    Total available seats: 6
                  </input>
                </program>
              </li>
            </ul>
          </p>
        </li>
        <li>
          <p>
            Implement <c>reserveSeat(String[][] seats, int row, int seat)</c>
            <ul>
              <li>
                <p>
                  The <c>reserveSeat()</c> method allows the user to reserve a seat by specifying the row and seat index.
                </p>
              </li>
              <li>
                <p>
                  If the seat is available, it changes the seat status to <em>"OCCUPIED"</em> and prints a success message.
                </p>
              </li>
              <li>
                <p>
                  If the seat is already occupied, it prints an error message.
                </p>
              </li>
              <li>
                <p>
                  Example output:
                </p>
                <!-- reserveSeat Output, Non-Interactive -->
                <program xml:id="mdas-reserve-seat-output-static" interactive="no">
                  <input>
                    [SUCCESS] Seat 0, 1 has now been reserved.
                    [ERROR] Seat 0, 2 has already been occupied.
                  </input>
                </program>
              </li>
            </ul>
          </p>
        </li>
      </ol>
    </subsection>
    <!-- Template Code for Growth Exercise -->
    <program xml:id="mdas-growth-template" interactive="activecode" language="java">
      <input>
        public class TheaterSeats {

          public static void main(String[] args) {
              String[][] seats = {
                  {"OCCUPIED", "AVAILABLE", "OCCUPIED", "AVAILABLE"}, 
                  {"AVAILABLE", "AVAILABLE", "OCCUPIED", "OCCUPIED"}, 
                  {"OCCUPIED", "OCCUPIED", "AVAILABLE", "AVAILABLE"}
              };

              /* UNCOMMENT TO TEST

              // Displaying the initial seating arrangement...
              displaySeats(seats);

              // Checking available seats...
              checkSeats(seats);

              // Reserving a few seats...
              reserveSeat(seats, 0, 1); // Available
              reserveSeat(seats, 0, 2); // Occupied
              reserveSeat(seats, 1, 0); // Available
              reserveSeat(seats, 2, 3); // Available

              // Displaying the seats after making reservations..
              displaySeats(seats);
              checkSeats(seats);

              // Attempting to reserve more seats...
              reserveSeat(seats, 1, 1); // Available
              reserveSeat(seats, 2, 2); // Available

              // Displaying final seating arrangement...
              displaySeats(seats);
              checkSeats(seats);
              */
          }
      
          public static void displaySeats(String[][] seats) {
              
          }
          
          public static void checkSeats(String[][] seats) {
    
          }
      
          public static void reserveSeat(String[][] seats, int row, int seat) {
             
          }
      }
      </input>
    </program>
    <!-- Expected Output for Growth Exercise -->
    <p>
      The expected output is:
    </p>
    <program xml:id="mdas-growth-output" interactive="no">
      <input>
        Seating Arrangement:
        OCCUPIED        AVAILABLE       OCCUPIED        AVAILABLE
        AVAILABLE       AVAILABLE       OCCUPIED        OCCUPIED
        OCCUPIED        OCCUPIED        AVAILABLE       AVAILABLE
        Row 1 has 2 available seats.
        Row 2 has 2 available seats.
        Row 3 has 2 available seats.
        Total available seats: 6
        [SUCCESS] Seat 0, 1 has now been reserved.
        [ERROR] Seat 0, 2 has already been occupied.
        [SUCCESS] Seat 1, 0 has now been reserved.
        [SUCCESS] Seat 2, 3 has now been reserved.
        Seating Arrangement:
        OCCUPIED        OCCUPIED        OCCUPIED        AVAILABLE
        OCCUPIED        AVAILABLE       OCCUPIED        OCCUPIED
        OCCUPIED        OCCUPIED        AVAILABLE       OCCUPIED
        Row 1 has 1 available seats.
        Row 2 has 1 available seats.
        Row 3 has 1 available seats.
        Total available seats: 3
        [SUCCESS] Seat 1, 1 has now been reserved.
        [SUCCESS] Seat 2, 2 has now been reserved.
        Seating Arrangement:
        OCCUPIED        OCCUPIED        OCCUPIED        AVAILABLE
        OCCUPIED        OCCUPIED        OCCUPIED        OCCUPIED
        OCCUPIED        OCCUPIED        OCCUPIED        OCCUPIED
        Row 1 has 1 available seats.
        Row 2 has 0 available seats.
        Row 3 has 0 available seats.
        Total available seats: 1
      </input>
    </program>
  </section>

  <section xml:id="sec-mdas-stretch-exercise">
    <title>Stretch Level</title>
    <block>
      <p>
        <alert>Multidimensional Arrays</alert>
      </p>
    </block>
    <objectives>
      <ul>
        <li>
          <p>
            Use a multidimensional array to represent a game grid
          </p>
        </li>
        <li>
          <p>
            Implement user input handling with a <c>Scanner</c> to control a player's movements on the grid
          </p>
        </li>
      </ul>
    </objectives>
    <!-- Overview for Stretch Exercise -->
    <subsection xml:id="subsec-mdas-stretch-overview">
      <title>Overview</title>
      <note>
        Since Runestone Academy does not support the use of a <c>Scanner</c> in its environment,
        please use an alternative platform to complete this exercise! You may use replit.com, Visual Studio Code, 
        or any other IDE of your choice that supports Java and allows the use of Scanner for user input.
      </note>
      <p>
        This is a basic grid-based game in Java where a player will move through a grid collecting coins, with the goal of reaching 
        the exit. The player starts at the top left corner of the grid and the exit is at the bottom right corner. 
        The player will move through the grid using the 'W', 'A', 'S', and 'D' keys.
      </p>
      <p>
        Here is an example of what the grid can look like:
      </p>
      <!-- Grid Example, Non-Interactive -->
      <program xml:id="mdas-stretch-grid-example-static" interactive="no">
        <input>
        P O . . . 
        . . . . O 
        . . . . . 
        . . . . . 
        . O . . E 
        </input>
      </program>
      <ul>
        <li>
          <p>
            The player is denoted by 'P'
          </p>
        </li>
        <li>
          <p>
            The coins are denoted by 'O'
          </p>
        </li>
        <li>
          <p>
            The exit is denoted by 'E'
          </p>
        </li>
      </ul>
      <p>
        The player will move on the grid through user input, which will be handled by a <c>Scanner</c>. 
        Each time the game is run, a new grid must be created. That is, the coins must be placed at a random spot each time.
      </p>
    </subsection>
    <!-- Instructions for Stretch Exercise -->
    <subsection xml:id="subsec-mdas-stretch-instructions">
      <title>Instructions</title>
      <ol>
        <li>
          <p>
            Building the grid with <c>char[][] buildGrid(int width, int height)</c>
          </p>
          <ul>
            <li>
              <p>
                Create a grid of <c>char[][]</c> and populate it with '.' which represents empty spaces
              </p>
            </li>
          </ul>
        </li>
        <li>
          <p>
            Printing the grid with <c>printGrid(char[][] grid)</c>
          </p>
          <ul>
            <li>
              <p>
                Iterate through the <c>char[][]</c> and print each row
              </p>
            </li>
          </ul>
        </li>
        <li>
          <p>
            Placing coins on the grid with <c>placeCoins(char[][] grid, int coinCount)</c>
          </p>
          <ul>
            <li>
              <p>
                This method will place coins randomly on the grid
              </p>
            </li>
            <li>
              <p>
                The number of coins to put on the grid is specified by the <c>coinCount</c> parameter. Coins are represented by 'O'
              </p>
            </li>
            <li>
              <p>
                <hint>
                  <p>
                    <ul>
                      <li>
                        <p>
                          Use a <c>Random</c> object to generate random x and y positions for the coins. Here is a code snippet that uses <c>Random</c>:
                        <!-- Random Example, Non-Interactive -->
                        <program xml:id="mdas-stretch-random-example-static" interactive="no">
                          <input>
                          Random random = new Random();
                          int randomInt = random.nextInt(100);
                          </input>
                        </program>
                        </p>
                        <p>
                          This will generate a random integer from 0 (inclusive) to 100 (exclusive)
                        </p>
                      </li>
                    </ul>
                  </p>
                </hint>
              </p>
            </li>
          </ul>
        </li>
        <li>
          <p>
            Implementing game logic in <c>playGame(int width, int height, int coinCount)</c>
          </p>
          <ul>
            <li>
              <p>
                Call the <c>buildGrid()</c> method and place the player (P) and the exit (E) in their designated spots on the grid. 
                Ensure that you initialize variables to keep track of the player's position
              </p>
            </li>
            <li>
              <p>
                Populate the grid with coins using the <c>placeCoins()</c> method
              </p>
            </li>
            <li>
              <p>
                Use a <c>while</c> loop to keep the game running until the player reaches the exit. Inside the loop, you will:
              </p>
              <ul>
                <li>
                  <p>
                    Print the grid after each move
                  </p>
                </li>
                <li>
                  <p>
                    Prompt the player to enter their next move and read the input in using a <c>Scanner</c>
                  </p>
                </li>
                <li>
                  <p>
                    Update the player's position on the grid to the new coordinates and if they have moved to a coin, update their points
                  </p>
                </li>
                <li>
                  <p>
                    End the game once the player has reached the exit
                  </p>
                </li>
                <li>
                  <p>
                    <alert>Make sure to handle the case where the player tries to move out of bounds by checking if the 
                      new coordinates are within the valid range before updating the player's position
                    </alert>
                  </p>
                </li>
              </ul>
            </li>
          </ul>
        </li>
      </ol>
    </subsection>
    <!-- Template Code for Stretch Exercise -->
    <program xml:id="mdas-stretch-template" interactive="activecode" language="java">
      <input>
        import java.util.Random;
        import java.util.Scanner;

        public class GridGame {
            public static void main(String[] args) {
                playGame(5, 5, 3);
            }

            public static char[][] buildGrid(int width, int height) {
              
            }
          
            public static void printGrid(char[][] grid) {
          
            }

            public static void placeCoins(char[][] grid, int coinCount) {
            
            }

            public static void playGame(int width, int height, int coinCount) {
                
            }
        }
      </input>
    </program>
    <p>
      Here is an example of what the gameplay output may look like:
    </p>
    <!-- Gameplay Example Output, Non-Interactive -->
    <program xml:id="mdas-stretch-gameplay-example-static" interactive="no">
      <input>
        P . . 
        O . . 
        . . E 
        Enter move (Only WASD, case sensitive): 
        S
        Got a coin!
        . . . 
        P . . 
        . . E 
        Enter move (Only WASD, case sensitive): 
        D
        . . . 
        . P . 
        . . E 
        Enter move (Only WASD, case sensitive): 
        D
        . . . 
        . . P 
        . . E 
        Enter move (Only WASD, case sensitive): 
        S
        You won! Points: 1
      </input>
    </program>
  </section>
</chapter>