<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-arraylists" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>ArrayLists</title>

  <introduction>
    <p> Text before the first section. </p>
  </introduction>

  <!-- include sections 
  <xi:include href="sec-section-name.ptx" />-->
  <section xml:id="sec-arraylists-exercises">
    <title>Check Your Understanding</title>
    <exercises xml:id="arraylists-short-exercises">

      <!-- Q1: True/False -->
      <exercise xml:id="array-list-elements">
        <title>ArrayList: Elements</title>
        <statement correct="no">
          <p>
            An <c>ArrayList</c> can store objects and primitives such as <c>int</c>, <c>double</c>, <c>boolean</c>.
          </p>
        </statement>
        <feedback>
          <p>
            ArrayLists cannot store the following: int, double, boolean, char, float, long, byte, short.
            A workaround is to use Wrapper classes.
          </p>
        </feedback>
      </exercise>

      <!-- Q2: Multiple Choice -->
      <exercise xml:id="accessing-array-list-elements">
        <title>ArrayList: Accessing Elements</title>
        <statement>
          <p>
            How would we access the first element in the ArrayList <c>list</c>?
          </p>
        </statement>
        <choices randomize="yes">
          <choice>
            <statement>
              <p>
                <c>list.item(0)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayList does not have a <c>.item()</c> method.
              </p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                <c>list.get(0)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Correct: In ArrayLists, we use the <c>.get(i)</c> method to access the element at index <c>i</c>.
              </p>
            </feedback>
            </choice>
          <choice>
            <statement>
              <p>
                <c>list[0]</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: Square brackets are used for accessing elements in an array, not an ArrayList.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                <c>list.set(0, element)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: The <c>.set(index, element)</c> method is used to replace the element at the specified <c>index</c> 
                with the specified <c>element</c>. It is not used for accessing elements.
              </p>
            </feedback>
            </choice>
        </choices>
      </exercise>

      <!-- Q3: Select all that apply -->
      <exercise xml:id="arraylists-features">
        <title>ArrayList: Features</title>
        <statement>
          <p>
            Which of the following are true about an <c>ArrayList</c>? (Select all that apply)
          </p>
        </statement>
        <choices randomize="yes">
          <choice correct="yes">
            <statement>
              <p>
                ArrayLists have a dynamic size.
              </p>
            </statement>
            <feedback>
              <p>
                Correct: Unlike partially-filled arrays, ArrayLists automatically resize themselves when an element is added or removed.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                ArrayLists have a fixed size.
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayLists resize automatically when an element is added or removed while 
                partially-filled arrays require manual resizing if you have reached capacity and are trying to add an element.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                ArrayLists use the <c>.length()</c> method to get the number of elements in the list.
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayLists use <c>.size()</c> while arrays use <c>.length()</c>.
              </p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                ArrayLists cannot be instantiated without importing from the Java Library.
              </p>
            </statement>
            <feedback>
              <p>
                Correct: To use ArrayLists, you must import the java.util.ArrayList package first.
              </p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
  </section>

  <!-- Starter Exercise-->
  <section xml:id="sec-arraylists-starter-exercise">
    <title>Starter Level</title>
    <block>
      <p>
        <alert>ArrayLists</alert>
      </p>
    </block>
    <!-- Objectives for Starter Exercise -->
    <objectives>
      <ul>
        <li> Instantiate an <c>ArrayList</c></li>
        <li> Use <c>add()</c>, <c>get()</c>, <c>set()</c>, <c>remove()</c>, and <c>size()</c></li>
        <li> Iterate through an <c>ArrayList</c> using a for loop </li>
      </ul>
    </objectives>
    <!-- Instructions for Starter Exercise -->
    <subsection xml:id="subsec-arraylists-starter-instructions">
      <title>Instructions</title>
      <ol>
        <li>
          <p>
            Initialize an <c>ArrayList</c> and add the following elements: "Butter", "Milk", "Cookies", "Chips", "Carrots"
          </p>
        </li>
        <li>
          <p>
            Remove the third item from the list
          </p>
        </li>
        <li>
          <p>
            Replace the second item in the list with "Pancakes"
          </p>
        </li>
        <li>
          <p>
            Remove the last item from the list
          </p>
        </li>
        <li>
          <p>
            Add "Apples" to the list
          </p>
        </li>
        <li>
          <p>
            Print the size of the list
          </p>
        </li>
        <li>
          <p>
            Print the contents of the list using a for loop
          </p>
        </li>   
      </ol>
    </subsection>
    <!-- Template Code for Starter Exercise -->
    <program xml:id="arraylists-starter-template" interactive="activecode" language="java">
      <input>
        import java.util.ArrayList;

        public class GroceryList{
          public static void main(String[] args) {

            // Initialize an ArrayList
            

            // Adding elements to the list

    
            // Removing Cookies from the list
    

            // Replacing Chips with Pancakes


            // Removing last item from list


            // Displaying list size

    
            // Printing the contents of the list using a for-loop


          }
        }
      </input>
    </program>
    <!-- Expected Output for Starter Exercise-->
    <p>
      The expected output is:
    </p>
    <program xml:id="arraylists-starter-output" interactive="no">
      <input>
        Size of the list: 3
        Contents of the list:
        Butter
        Milk
        Chips
        Apples
      </input>
    </program>
  </section>

  <!-- Growth Exercise-->
  <section xml:id="sec-arraylists-growth-exercise">
    <title>Growth Level</title>
    <block>
      <p>
        <alert>ArrayLists</alert>
      </p>
    </block>
    <!-- Objectives for Growth Exercise -->
    <objectives >
      <ul>
        <li></li>
      </ul>
      </objectives>
      <!-- Overview for Growth Exercise -->
      <subsection xml:id="subsec-arraylists-growth-overview">
        <title>Overview</title>
        <p>
          This Java program contains a class named <c>Animal</c>, where each instance represents an individual animal that is characterized by a <c>name</c> and a <c>type</c>.
          Each <c>Animal</c> that is created is added to a <c>static</c> <c>ArrayList</c> that you will instantiate named <c>allAnimals</c>. 
        </p>
        <!-- Animal Class Code, Non-Interactive -->
        <program xml:id="arraylists-growth-animal-class-static" interactive="no">
          <input>
            public class Animal {
              //**TO-DO: Initialize a static ArrayList here called allAnimals**
              String name;
              String type;

              public Animal(String name, String type){
                  this.name = name;
                  this.type = type;
                  allAnimals.add(this);
              }

              public String toString(){
                  return name + " (" + type + ")";
              }

              //**TO-DO: Write method that checks if an animal in the list**
              public static boolean isDuplicate(String nameToCheck){
              
              }
            }
          </input>
        </program>
      </subsection>
      <!-- Instructions for Growth Exercise-->
      <subsection xml:id="subsec-arraylists-growth-instructions">
        <title>Instructions</title>
          <p>
            Complete <c>isDuplicate()</c> to locate duplicates in <c>allAnimals</c> which contains <c>Animal</c> objects.
            <ul>
              <li>
                <p>
                  A "duplicate" refers to an <c>Animal</c> with the same name as another <c>Animal</c> that is already in the list. 
                </p>
              </li>
              <li>
                <p>
                  That is, if an <c>Animal</c> 
                  with a particular name already exists in <c>allAnimals</c>, any subsequent <c>Animal</c> with the exact same name is considered a duplicate.
                </p>
              </li>
              <li>
                <p>
                  You may assume that all names begin with a capital letter.
                </p>
              </li>
            </ul>
          </p>
      </subsection>
      <!-- Template Code for Growth Exercise -->
      <program xml:id="arraylists-growth-template" interactive="activecode" language="java">
        <input>
          import java.util.ArrayList;
          public class Animal {

              //**TO-DO: Initialize a static ArrayList here called allAnimals**
              String name;
              String type;

              public Animal(String name, String type){
                  this.name = name;
                  this.type = type;
                  allAnimals.add(this);
              }

              public String toString(){
                  return name + " (" + type + ")";
              }

              //**TO-DO: Write method that checks if an animal in the list**
              public static boolean isDuplicate(String nameToCheck){
              
              }

              public static void main(String[] args){

                  // ----- DO NOT CHANGE -----
                  
                  //Creating animals..
                  Animal greg = new Animal("Greg", "giraffe");
                  Animal alice = new Animal("Alice", "aardvark");
                  Animal reggie = new Animal("Reggie", "raccoon");
                  Animal orville = new Animal("Orville", "ostrich");
                  Animal paul = new Animal("Paul", "piranha");
                  Animal harry = new Animal("Harry", "hippo");

                  //Testing method..
                  Animal.isDuplicate("Alice");
                  Animal.isDuplicate("George");
                  Animal.isDuplicate("Timothy");
                  Animal.isDuplicate("Paul");
                  Animal.isDuplicate("Orville");
                  Animal.isDuplicate("Oliver");

                  // ----- DO NOT CHANGE -----
              }
          }
        </input>
      </program>
      <!-- Expected Output for Growth Exercise -->
      <p>
        The expected output is:
      </p>
      <program xml:id="arraylists-growth-output" interactive="no">
        <input>
          DUPLICATE: There is already an animal with the name "Alice" in the list: Alice (aardvark)
          UNIQUE: The name George is unique.
          UNIQUE: The name Timothy is unique.
          DUPLICATE: There is already an animal with the name "Paul" in the list: Paul (piranha)
          DUPLICATE: There is already an animal with the name "Orville" in the list: Orville (ostrich)
          UNIQUE: The name Oliver is unique.
        </input>
      </program>
  </section>

  <!-- Stretch Exercise -->
  <section xml:id="sec-arraylists-stretch-exercise">
    <title>Stretch Level</title>
    <block>
      <p>
        <alert>ArrayLists</alert>
      </p>
    </block>
    <!-- Objectives for Stretch Exercise -->
    <objectives>
      <ul>
        <li> Accessing and manipulating data stored in an <c>ArrayList</c></li>
      </ul>
      </objectives>
      <!-- Overview for Stretch Exercise -->
      <subsection xml:id="subsec-arraylists-stretch-overview">
        <title>Overview</title>
        <p>
          LyricProcessor is a Java program that reads and manipulates text that is stored in a file named <c>song-lyrics.txt</c>
          This file currently contains the lyrics to Michael Jackson's "Thriller" and the program uses an <c>ArrayList</c> to
          store each line from the song and provide several functionalities, such as:
        </p> 
          <ol>
            <li>
              <p>
                Printing all the lines in the file
              </p>
            </li>
            <li>
              <p>
                Printing lines that contain a specific word
              </p>
            </li>
            <li>
              <p>
                Replacing every instance of a word with a specific word
              </p>
            </li>
          </ol>
      </subsection>
      <!-- Instructions for Stretch Exercise-->
      <subsection xml:id="subsec-arraylists-stretch-instructions">
          <title>Instructions</title>
          <p>
            Your task is to implement the <c>LyricProcessor</c>class using the provided <c>BufferedReader</c> code that reads the file. 
          </p>

          <ol>
            <li>
              <p>
                Define an <c>ArrayList</c> of <c>String</c> to store the lines from the file.
              </p>
              <ul>
                <li>
                  <p>
                    Initialize this <c>ArrayList</c> in the constructor
                  </p>
                </li>
                <li>
                  <p>
                    In the provided BufferedReader code, ensure that each line that is being read is added to the <c>ArrayList</c>
                  </p>
                </li>
              </ul>
            </li>
            <li>
              <p>
                Implement the <c>printAllLines()</c> method
              </p>
              <ul>
                <li>
                  <p>
                    This method iterates through the ArrayList to print each line
                  </p>
                </li>
              </ul>
            </li>
            <li>
              <p>
                Implement <c>printLinesContainingWord(String word)</c>
              </p>
              <ul>
                <li>
                  <p>
                    Similar to <c>printAllLines()</c>, this method will iterate through the <c>ArrayList</c> but will only
                    print the lines that contain a specific word
                  </p>
                </li>
              </ul>
              <hint>
                <p>
                  Use the <c>.contains()</c> method for <c>String</c> to check if a line contains the specified word.
                </p>
              </hint>
            </li>
            <li>
              <p>
                Implement the <c>findAndReplace(String oldWord, String newWord)</c> method
              </p>
              <ul>
                <li>
                  <p>
                    This method will iterate through the <c>ArrayList</c> and replace each occurence of <c>oldWord</c> with <c>newWord</c>
                  </p>
                </li>
              </ul>
            </li>
          </ol>
      </subsection>
      <!-- Template Code for Stretch Exercise -->
      <program xml:id="arraylists-stretch-template" interactive="activecode" language="java">
        <input>
          
        </input>
      </program>
      <!-- Expected Output for Stretch Exercise-->
      <p>
        The expected output is:
      </p>
      <program xml:id="arraylists-stretch-output" interactive="no">
        <input>

        </input>
      </program>
  </section>
</chapter>