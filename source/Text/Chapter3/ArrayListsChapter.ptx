<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-arraylists" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>ArrayLists</title>

  <introduction>
    <p> Text before the first section. </p>
  </introduction>

  <!-- include sections 
  <xi:include href="sec-section-name.ptx" />-->
  <section xml:id="sec-arraylists-exercises">
    <title>Check Your Understanding</title>
    <exercises xml:id="arraylists-short-exercises">

      <!-- Q1: True/False -->
      <exercise xml:id="array-list-elements">
        <title>ArrayList: Elements</title>
        <statement correct="no">
          <p>
            An <c>ArrayList</c> can store objects and primitives such as <c>int</c>, <c>double</c>, <c>boolean</c>.
          </p>
        </statement>
        <feedback>
          <p>
            ArrayLists cannot store the following: int, double, boolean, char, float, long, byte, short.
            A workaround is to use Wrapper classes.
          </p>
        </feedback>
      </exercise>

      <!-- Q2: Multiple Choice -->
      <exercise xml:id="accessing-array-list-elements">
        <title>ArrayList: Accessing Elements</title>
        <statement>
          <p>
            How would we access the first element in the ArrayList <c>list</c>?
          </p>
        </statement>
        <choices randomize="yes">
          <choice>
            <statement>
              <p>
                <c>list.item(0)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayList does not have a <c>.item()</c> method.
              </p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                <c>list.get(0)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Correct: In ArrayLists, we use the <c>.get(i)</c> method to access the element at index <c>i</c>.
              </p>
            </feedback>
            </choice>
          <choice>
            <statement>
              <p>
                <c>list[0]</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: Square brackets are used for accessing elements in an array, not an ArrayList.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                <c>list.set(0, element)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: The <c>.set(index, element)</c> method is used to replace the element at the specified <c>index</c> 
                with the specified <c>element</c>. It is not used for accessing elements.
              </p>
            </feedback>
            </choice>
        </choices>
      </exercise>

      <!-- Q3: Select all that apply -->
      <exercise xml:id="arraylists-features">
        <title>ArrayList: Features</title>
        <statement>
          <p>
            Which of the following are true about an <c>ArrayList</c>? (Select all that apply)
          </p>
        </statement>
        <choices randomize="yes">
          <choice correct="yes">
            <statement>
              <p>
                ArrayLists have a dynamic size.
              </p>
            </statement>
            <feedback>
              <p>
                Correct: Unlike partially-filled arrays, ArrayLists automatically resize themselves when an element is added or removed.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                ArrayLists have a fixed size.
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayLists resize automatically when an element is added or removed while 
                partially-filled arrays require manual resizing if you have reached capacity and are trying to add an element.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                ArrayLists use the <c>.length()</c> method to get the number of elements in the list.
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayLists use <c>.size()</c> while arrays use <c>.length()</c>.
              </p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                ArrayLists cannot be instantiated without importing from the Java Library.
              </p>
            </statement>
            <feedback>
              <p>
                Correct: To use ArrayLists, you must import the java.util.ArrayList package first.
              </p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
  </section>

  <!-- Starter Exercise-->
  <section xml:id="sec-arraylists-starter-exercise">
    <title>Starter Level</title>
    <block>
      <p>
        <alert>ArrayLists</alert>
      </p>
    </block>
    <!-- Objectives for Starter Exercise -->
    <objectives>
      <ul>
        <li> Instantiate an <c>ArrayList</c></li>
        <li> Use <c>add()</c>, <c>get()</c>, <c>set()</c>, <c>remove()</c>, and <c>size()</c></li>
        <li> Iterate through an <c>ArrayList</c> using a for loop </li>
      </ul>
    </objectives>
    <!-- Instructions for Starter Exercise -->
    <subsection xml:id="subsec-arraylists-starter-instructions">
      <title>Instructions</title>
      <ol>
        <li>
          <p>
            Initialize an <c>ArrayList</c> and add the following elements: "Butter", "Milk", "Cookies", "Chips", "Carrots"
          </p>
        </li>
        <li>
          <p>
            Remove the third item from the list
          </p>
        </li>
        <li>
          <p>
            Replace the second item in the list with "Pancakes"
          </p>
        </li>
        <li>
          <p>
            Remove the last item from the list
          </p>
        </li>
        <li>
          <p>
            Add "Apples" to the list
          </p>
        </li>
        <li>
          <p>
            Print the size of the list
          </p>
        </li>
        <li>
          <p>
            Print the contents of the list using a for loop
          </p>
        </li>   
      </ol>
    </subsection>
    <!-- Template Code for Starter Exercise -->
    <program xml:id="arraylists-starter-template" interactive="activecode" language="java">
      <input>
        import java.util.ArrayList;

        public class GroceryList{
          public static void main(String[] args) {

            // Initialize an ArrayList
            

            // Adding elements to the list

    
            // Removing Cookies from the list
    

            // Replacing Chips with Pancakes


            // Removing last item from list


            // Displaying list size

    
            // Printing the contents of the list using a for-loop


          }
        }
      </input>
    </program>
    <!-- Expected Output for Starter Exercise-->
    <p>
      The expected output is:
    </p>
    <program xml:id="arraylists-starter-output" interactive="no">
      <input>
        Size of the list: 3
        Contents of the list:
        Butter
        Milk
        Chips
        Apples
      </input>
    </program>
  </section>

  <!-- Growth Exercise-->
  <section xml:id="sec-arraylists-growth-exercise">
    <title>Growth Level</title>
    <block>
      <p>
        <alert>ArrayLists</alert>
      </p>
    </block>
    <!-- Objectives for Growth Exercise -->
    <objectives >
      <ul>
        <li>Accessing data in an <c>ArrayList</c></li>
      </ul>
      </objectives>
      <!-- Overview for Growth Exercise -->
      <subsection xml:id="subsec-arraylists-growth-overview">
        <title>Overview</title>
        <p>
          This Java program contains a class named <c>Animal</c>, where each instance represents an individual animal that is characterized by a <c>name</c> and a <c>type</c>.
          Each <c>Animal</c> that is created is added to a <c>static</c> <c>ArrayList</c> that you will instantiate named <c>allAnimals</c>. 
        </p>
        <!-- Animal Class Code, Non-Interactive -->
        <program xml:id="arraylists-growth-animal-class-static" interactive="no">
          <input>
            public class Animal {
              //**TO-DO: Initialize a static ArrayList here called allAnimals**
              String name;
              String type;

              public Animal(String name, String type){
                  this.name = name;
                  this.type = type;
                  allAnimals.add(this);
              }

              public String toString(){
                  return name + " (" + type + ")";
              }

              //**TO-DO: Write method that checks if an animal in the list**
              public static boolean isDuplicate(String nameToCheck){
              
              }
            }
          </input>
        </program>
      </subsection>
      <!-- Instructions for Growth Exercise-->
      <subsection xml:id="subsec-arraylists-growth-instructions">
        <title>Instructions</title>
          <p>
            Complete <c>isDuplicate()</c> to locate duplicates in <c>allAnimals</c> which contains <c>Animal</c> objects.
            <ul>
              <li>
                <p>
                  A "duplicate" refers to an <c>Animal</c> with the same name as another <c>Animal</c> that is already in the list. 
                </p>
              </li>
              <li>
                <p>
                  That is, if an <c>Animal</c> 
                  with a particular name already exists in <c>allAnimals</c>, any subsequent <c>Animal</c> with the exact same name is considered a duplicate.
                </p>
              </li>
              <li>
                <p>
                  You may assume that all names begin with a capital letter.
                </p>
              </li>
            </ul>
          </p>
      </subsection>
      <!-- Template Code for Growth Exercise -->
      <program xml:id="arraylists-growth-template" interactive="activecode" language="java">
        <input>
          import java.util.ArrayList;
          public class Animal {

              //**TO-DO: Initialize a static ArrayList here called allAnimals**
              String name;
              String type;

              public Animal(String name, String type){
                  this.name = name;
                  this.type = type;
                  allAnimals.add(this);
              }

              public String toString(){
                  return name + " (" + type + ")";
              }

              //**TO-DO: Write method that checks if an animal in the list**
              public static boolean isDuplicate(String nameToCheck){
              
              }

              public static void main(String[] args){

                  // ----- DO NOT CHANGE -----
                  
                  //Creating animals..
                  Animal greg = new Animal("Greg", "giraffe");
                  Animal alice = new Animal("Alice", "aardvark");
                  Animal reggie = new Animal("Reggie", "raccoon");
                  Animal orville = new Animal("Orville", "ostrich");
                  Animal paul = new Animal("Paul", "piranha");
                  Animal harry = new Animal("Harry", "hippo");

                  //Testing method..
                  Animal.isDuplicate("Alice");
                  Animal.isDuplicate("George");
                  Animal.isDuplicate("Timothy");
                  Animal.isDuplicate("Paul");
                  Animal.isDuplicate("Orville");
                  Animal.isDuplicate("Oliver");

                  // ----- DO NOT CHANGE -----
              }
          }
        </input>
      </program>
      <!-- Expected Output for Growth Exercise -->
      <p>
        The expected output is:
      </p>
      <program xml:id="arraylists-growth-output" interactive="no">
        <input>
          DUPLICATE: There is already an animal with the name "Alice" in the list: Alice (aardvark)
          UNIQUE: The name George is unique.
          UNIQUE: The name Timothy is unique.
          DUPLICATE: There is already an animal with the name "Paul" in the list: Paul (piranha)
          DUPLICATE: There is already an animal with the name "Orville" in the list: Orville (ostrich)
          UNIQUE: The name Oliver is unique.
        </input>
      </program>
  </section>

  <!-- Stretch Exercise -->
  <section xml:id="sec-arraylists-stretch-exercise">
    <title>Stretch Level</title>
    <block>
      <p>
        <alert>ArrayLists</alert>
      </p>
    </block>
    <!-- Objectives for Stretch Exercise -->
    <objectives>
      <ul>
        <li> Accessing and manipulating data stored in an <c>ArrayList</c></li>
      </ul>
      </objectives>

      <datafile xml:id="arraylists-stretch-song-lyrics" label="song-lyrics" filename="song-lyrics.txt" hide="yes">
				<pre>
As he came into the window
It was the sound of a crescendo
He came into her apartment
He left the bloodstains on the carpet
She ran underneath the table
He could see she was unable
So she ran into the bedroom
She was struck down
It was her doom
Annie, are you okay
So, Annie, are you okay
Are you okay, Annie
Annie, are you okay
So, Annie, are you okay
Are you okay, Annie
Annie, are you okay
So, Annie, are you okay
Are you okay, Annie
Annie, are you okay
So, Annie are you okay
Are you okay, Annie
Annie are you okay?
Will you tell us that you're okay
There's a sign in the window
That he struck you - a crescendo, Annie
He came into your apartment
He left the bloodstains on the carpet
Then you ran into the bedroom
You were struck down
It was your doom
Annie are you okay
So Annie are you okay
Are you okay Annie
You've been hit by
You've been hit by a smooth criminal
Ow!
Ow!
Aw!
Annie are you okay (I don't know)
Will you tell us that you're okay (I don't know)
There's a sound at the window (I don't know)
Then he struck you, a crescendo Annie (I don't know)
He came into your apartment (I don't know)
Left bloodstains on the carpet (I don't know why, baby)
And then you ran into the bedroom (help me)
You were struck down
It was your doom Annie (dag gone it)
Annie are you okay
So, Annie are you okay
Are you okay Annie
You've been hit by
You've been hit by a smooth criminal
				</pre>
			</datafile>

      <!-- Overview for Stretch Exercise -->
      <subsection xml:id="subsec-arraylists-stretch-overview">
        <title>Overview</title>
        <p>
          LyricProcessor is a Java program that will read and manipulate the text that is stored in a hidden text file named <c>song-lyrics.txt</c>,
          which currently contains the lyrics to Michael Jackson's "Smooth Criminal". Each line of the song will be stored as an element in an
          <c>ArrayList</c>. The program will have the following functionalities:
        </p> 
          <ol>
            <li>
              <p>
                Prints all the lines in the file
              </p>
            </li>
            <li>
              <p>
                Prints lines that contain a specific word
              </p>
            </li>
            <li>
              <p>
                Replaces every instance of a word with a specific word
              </p>
            </li>
          </ol>
      </subsection>
      <!-- Instructions for Stretch Exercise-->
      <subsection xml:id="subsec-arraylists-stretch-instructions">
          <title>Instructions</title>
          <p>
            Your task is to implement the methods inside the <c>LyricProcessor</c>class using the provided <c>BufferedReader</c> code that reads the file. 
          </p>

          <ol>
            <li>
              <p>
                Define an <c>ArrayList</c> of <c>String</c> to store the lines from the file
              </p>
              <ul>
                <li>
                  <p>
                    Initialize this ArrayList in the constructor
                  </p>
                </li>
                <li>
                  <p>
                    In <c>readFile(String filename)</c>, ensure that each line that is being read is added to the ArrayList
                  </p>
                </li>
              </ul>
            </li>
            <li>
              <p>
                Implement the <c>printAllLines()</c> method
              </p>
              <ul>
                <li>
                  <p>
                    This method iterates through the ArrayList to print each line
                  </p>
                </li>
              </ul>
            </li>
            <li>
              <p>
                Implement <c>printLinesContainingWord(String word)</c>
              </p>
              <ul>
                <li>
                  <p>
                    Similar to <c>printAllLines()</c>, this method will iterate through the ArrayList but will only
                    print the lines that contain <c>word</c>
                  </p>
                </li>
                <li>
                  <p>
                    Make sure to also print the total number of occurrences of <c>word</c> in the entire song
                  </p>
                </li>
              </ul>
            </li>
            <li>
              <p>
                Implement <c>findAndReplace(String oldWord, String newWord)</c>
              </p>
              <ul>
                <li>
                  <p>
                    This method will iterate through the ArrayList and replace each occurence of <c>oldWord</c> with <c>newWord</c>
                  </p>
                </li>
              </ul>
            </li>
          </ol>

          <p>
            In the provided template, a <c>BufferedReader</c> is used to read the lyrics from the file.
            <alert>Since you have not yet learned about File I/O, you don't need to worry about how this part of the code works for now.</alert>
          </p>

          <p>
            The template also includes a <c>System.out.println()</c> statement to display the contents of the text file. 
            This is simply to help you see the lyrics that are being read in, even though the text file itself is hidden. You may comment this out when starting to write your code.  
            Try and press the <em>Save and Run</em> button to see the contents of the file!
          </p>

      
          <hint>
            <p>
              The following methods may help in your implementations:
              <ul>
                <li>
                  <p>
                    <c>String.contains(word)</c> This method returns a boolean and checks if <c>String</c> contains the specified substring <c>word</c>
                  </p>
                </li>
                <li>
                  <p>
                    <c>String.replace(oldString, newString)</c> This method returns a string and replaces every occurrence of <c>oldString</c> in <c>String</c> with <c>newString</c>.
                  </p>
                </li>
              </ul>


            </p>
          </hint>

      </subsection>
      <!-- Template Code for Stretch Exercise -->
      <program xml:id="arraylists-stretch-template" interactive="activecode" language="java" sourcefile="LyricTemplate.java" datafile="song-lyrics.txt">
        <input>
import java.io.*;
import java.util.ArrayList;

public class LyricProcessor {
    
    public LyricProcessor() {
       
    }

    //Stores each line in file into arraylist
    public void readFile(String filename) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filename));
            String line;
            while ((line = reader.readLine()) != null) {
                //*TO-DO* Add 'line' to your ArrayList
                System.out.println(line);
              
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //*TO-DO* Prints all lines in the file
    public void printAllLines() {
        
    }

    //*TO-DO* Prints all the lines that contain a certain word
    public void printLinesContainingWord(String word) {
    
    }

    //*TO-DO* Replaces every instance of a word with a specified word
    public void findAndReplace(String oldWord, String newWord) {
       
    }

    //*TO-DO* Prints the total number of lines
    public void printLineCount() {
      
    }

    public static void main(String[] args) {
        
        LyricProcessor lyricProcessor = new LyricProcessor();
        lyricProcessor.readFile("song-lyrics.txt");

        System.out.println("Testing...");
        System.out.println("\nLines containing 'okay':");
        lyricProcessor.printLinesContainingWord("okay");

        System.out.println("\nLines containing 'apartment':");
        lyricProcessor.printLinesContainingWord("apartment");
         
        System.out.println("\nReplacing 'Annie' with '[YOUR NAME]':");
        lyricProcessor.findAndReplace("Annie", "YOURNAME");
        lyricProcessor.printLinesContainingWord("YOURNAME");

        System.out.println("\nLine count:");
        lyricProcessor.printLineCount();
    }
}
        </input>
      </program>

      <!-- Expected Output for Stretch Exercise-->
      <p>
        The expected output for the provided tests is:
      </p>
      <program xml:id="arraylists-stretch-output" interactive="no">
        <input>
Lines containing 'okay':
Line 10: Annie, are you okay
Line 11: So, Annie, are you okay
Line 12: Are you okay, Annie
Line 13: Annie, are you okay
Line 14: So, Annie, are you okay
Line 15: Are you okay, Annie
Line 16: Annie, are you okay
Line 17: So, Annie, are you okay
Line 18: Are you okay, Annie
Line 19: Annie, are you okay
Line 20: So, Annie are you okay
Line 21: Are you okay, Annie
Line 22: Annie are you okay?
Line 23: Will you tell us that you're okay
Line 31: Annie are you okay
Line 32: So Annie are you okay
Line 33: Are you okay Annie
Line 39: Annie are you okay (I don't know)
Line 40: Will you tell us that you're okay (I don't know)
Line 48: Annie are you okay
Line 49: So, Annie are you okay
Line 50: Are you okay Annie
Total occurences of okay: 22

Lines containing 'apartment':
Line 3: He came into her apartment
Line 26: He came into your apartment
Line 43: He came into your apartment (I don't know)
Total occurences of apartment: 3

Replacing 'Annie' with '[YOUR NAME]':
Line 10: YOURNAME, are you okay
Line 11: So, YOURNAME, are you okay
Line 12: Are you okay, YOURNAME
Line 13: YOURNAME, are you okay
Line 14: So, YOURNAME, are you okay
Line 15: Are you okay, YOURNAME
Line 16: YOURNAME, are you okay
Line 17: So, YOURNAME, are you okay
Line 18: Are you okay, YOURNAME
Line 19: YOURNAME, are you okay
Line 20: So, YOURNAME are you okay
Line 21: Are you okay, YOURNAME
Line 22: YOURNAME are you okay?
Line 25: That he struck you - a crescendo, YOURNAME
Line 31: YOURNAME are you okay
Line 32: So YOURNAME are you okay
Line 33: Are you okay YOURNAME
Line 39: YOURNAME are you okay (I don't know)
Line 42: Then he struck you, a crescendo YOURNAME (I don't know)
Line 47: It was your doom YOURNAME (dag gone it)
Line 48: YOURNAME are you okay
Line 49: So, YOURNAME are you okay
Line 50: Are you okay YOURNAME
Total occurences of YOURNAME: 23

Line count:
Total number of lines: 52
        </input>
      </program>
  </section>
</chapter>