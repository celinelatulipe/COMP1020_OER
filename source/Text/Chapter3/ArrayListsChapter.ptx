<?xml version="1.0" encoding="UTF-8"?>

<chapter xml:id="ch-arraylists" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>ArrayLists</title>

  <introduction>
    <p> Text before the first section. </p>
  </introduction>

  <!-- include sections 
  <xi:include href="sec-section-name.ptx" />-->
  <section xml:id="chapter5-short-exercises">
    <title>Check Your Understanding</title>
    <exercises xml:id="short-exercises">

      <!-- Q1: True/False -->
      <exercise xml:id="true-false-one" label="array-list-elements">
        <title>True/False</title>
        <statement correct="no">
          <p>
            ArrayLists can store objects and primitives such as <c>int</c>, <c>double</c>, <c>boolean</c>.
          </p>
        </statement>
        <feedback>
          <p>
            ArrayLists cannot store the following: int, double, boolean, char, float, long, byte, short.
            A workaround is to use Wrapper classes.
          </p>
        </feedback>
      </exercise>

      <!-- Q2: Multiple Choice -->
      <exercise xml:id="multiple-choice-one" label="multiple-choice-not-randomized">
        <title>Accessing Elements in an ArrayList</title>
        <statement>
          <p>
            How would we access the first element in the ArrayList <c>list</c>?
          </p>
        </statement>
        <choices>
          <choice>
            <statement>
              <p>
                <c>list.item(0)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayList does not have a <c>.item()</c> method.
              </p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                <c>list.get(0)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Correct: In ArrayLists, we use the <c>.get(i)</c> method to access the element at index <c>i</c>.
              </p>
            </feedback>
            </choice>
          <choice>
            <statement>
              <p>
                <c>list[0]</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: Square brackets are used for accessing elements in an array, not an ArrayList.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                <c>list.set(0, element)</c>
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: The <c>.set(index, element)</c> method is used to replace the element at the specified <c>index</c> 
                with the specified <c>element</c>. It is not used for accessing elements.
              </p>
            </feedback>
            </choice>
        </choices>
      </exercise>

      <!-- Q3: Select all that apply -->
      <exercise label="multiple-choice-multiple-answers">
        <title>Select all that apply</title>
        <statement>
          <p>
            Which of the following are true about ArrayLists? (Select all that apply)
          </p>
        </statement>
        <choices>
          <choice correct="yes">
            <statement>
              <p>
                ArrayLists have a dynamic size.
              </p>
            </statement>
            <feedback>
              <p>
                Correct: Unlike partially-filled arrays, ArrayLists automatically resize themselves when an element is added or removed.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                ArrayLists have a fixed size.
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayLists resize automatically when an element is added or removed while 
                partially-filled arrays require manual resizing if you have reached capacity and are trying to add an element.
              </p>
            </feedback>
          </choice>
          <choice>
            <statement>
              <p>
                ArrayLists use the <c>.length()</c> method to get the number of elements in the list.
              </p>
            </statement>
            <feedback>
              <p>
                Incorrect: ArrayLists use <c>.size()</c> while arrays use <c>.length()</c>.
              </p>
            </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>
                ArrayLists cannot be instantiated without importing from the Java Library.
              </p>
            </statement>
            <feedback>
              <p>
                Correct: To use ArrayLists, you must import the java.util.ArrayList package first.
              </p>
            </feedback>
          </choice>
        </choices>
      </exercise>
    </exercises>
  </section>

  <!-- Level 1 Programming Exercise-->
  <section xml:id="chapter-5-level-1-exercise">
    <title>Starter Level</title>
    <!-- Objectives for Level 1 Exercise-->
    <objectives>
      <ul>
        <li> Instantiate an <c>ArrayList</c></li>
        <li> Use <c>add()</c>, <c>get()</c>, <c>set()</c>, <c>remove()</c>, and <c>size()</c></li>
        <li> Iterate through an ArrayList using a for loop </li>
      </ul>
    </objectives>

    <subsection>
      <title>Instructions</title>
      <ol>
        <li>
          <p>
            Initialize an ArrayList and add the following elements: "Butter", "Milk", "Cookies", "Chips", "Carrots".
          </p>
        </li>
        <li>
          <p>
            Remove the third item from the list.
          </p>
        </li>
        <li>
          <p>
            Replace the second item in the list with "Pancakes"
          </p>
        </li>
        <li>
          <p>
            Remove the last item from the list
          </p>
        </li>
        <li>
          <p>
            Add "Apples" to the list
          </p>
        </li>
        <li>
          <p>
            Print the size of the list
          </p>
        </li>
        <li>
          <p>
            Print the contents of the list using a for-loop.
          </p>
        </li>   
      </ol>
    </subsection>


    <!-- Code-->
    <program xml:id="chapter-5-level-1" interactive="activecode" language="java">
      <input>
        import java.util.ArrayList;

        public class GroceryList(String[] args) {
          public static void main(String[] args) {

            // Initialize an ArrayList
            

            // Adding elements to the list

    
            // Removing Cookies from the list
    

            // Replacing Chips with Pancakes


            // Removing last item from list


            // Displaying list size

    
            // Printing the contents of the list using a for-loop


          }

        }
      </input>
    </program>

    <p>
      The expected output is:
    </p>

    <program xml:id="grocerylist-output-static" interactive="no">
      <input>
        Size of the list: 3
        Contents of the list:
        Butter
        Milk
        Chips
        Apples
      </input>
    </program>

  </section>

  <!-- Level 2 Programming Exercise-->
  <section xml:id="chapter-5-level-2-exercise">
    <title>Growth Level</title>
    <!-- Objectives for Level 2 Exercise-->
    <objectives >
      <ul>
        <li>Iterating through ArrayLists with a for-loop</li>
      </ul>
      </objectives>
      <p>
        The following program requires you to write a method to locate duplicates within an ArrayList containing <c>Animal</c> objects.
        A "duplicate" refers to an <c>Animal</c> with the same name as another <c>Animal</c> that is already in the list. That is, if an <c>Animal</c> 
        with a particular name already exists in the ArrayList, any subsequent <c>Animal</c> with the exact same name is considered a duplicate.
      </p>

      <!-- Animal Class Code, Non-Interactive -->
      <program xml:id="animal-class-static" interactive="no" language="java">
        <input>

          public class Animal {
            //**TO-DO: Initialize a static ArrayList here called allAnimals**
            String name;
            String type;

            public Animal(String name, String type){
                this.name = name;
                this.type = type;
                allAnimals.add(this);
            }

            public String toString(){
                return name + " (" + type + ")";
            }

            //**TO-DO: Write method that checks if an animal in the list**
            public static boolean isDuplicate(String nameToCheck){
            
            }
          }
        </input>
      </program>
  
      <p>
        The program contains a class named <c>Animal</c>, where each instance represents an individual animal that is characterized by a <c>name</c> and a <c>type</c>.
        Each animal that is created is added to a static ArrayList <c>allAnimals</c>. You may assume that all names begin with a capital letter.
      </p>

      <!-- Code-->
      <program xml:id="chapter-5-level-2" interactive="activecode" language="java">
        <input>
          import java.util.ArrayList;
          public class Animal {

              //**TO-DO: Initialize a static ArrayList here called allAnimals**
              String name;
              String type;

              public Animal(String name, String type){
                  this.name = name;
                  this.type = type;
                  allAnimals.add(this);
              }

              public String toString(){
                  return name + " (" + type + ")";
              }

              //**TO-DO: Write method that checks if an animal in the list**
              public static boolean isDuplicate(String nameToCheck){
              
              }

              public static void main(String[] args){

                  // ----- DO NOT CHANGE -----

                  //Creating animals..
                  Animal greg = new Animal("Greg", "giraffe");
                  Animal alice = new Animal("Alice", "aardvark");
                  Animal reggie = new Animal("Reggie", "raccoon");
                  Animal orville = new Animal("Orville", "ostrich");
                  Animal paul = new Animal("Paul", "piranha");
                  Animal harry = new Animal("Harry", "hippo");

                  //Testing method..
                  Animal.isDuplicate("Alice");
                  Animal.isDuplicate("George");
                  Animal.isDuplicate("Timothy");
                  Animal.isDuplicate("Paul");
                  Animal.isDuplicate("Orville");
                  Animal.isDuplicate("Oliver");

                  // ----- DO NOT CHANGE -----
              }
          }
        </input>
      </program>

      <p>
        The expected output is:
      </p>

      <program xml:id="animal-output-static" interactive="no">
        <input>
          DUPLICATE: There is already an animal with the name "Alice" in the list: Alice (aardvark)
          UNIQUE: The name George is unique.
          UNIQUE: The name Timothy is unique.
          DUPLICATE: There is already an animal with the name "Paul" in the list: Paul (piranha)
          DUPLICATE: There is already an animal with the name "Orville" in the list: Orville (ostrich)
          UNIQUE: The name Oliver is unique.
        </input>
      </program>
  </section>

  <!-- Level 3 Programming Exercise-->
  <section xml:id="chapter-5-level-3-exercise">
    <title>Stretch Level</title>
    <!-- Objectives for Level 3 Exercise-->
    <objectives >
      <ul>
        <li> Objective 1</li>
        <li> Objective 2</li>
      </ul>
      </objectives>
      <p>
        [QUESTION INFO HERE]
      </p>
      <!-- Code-->
      <program xml:id="chapter-5-level-3" interactive="activecode" language="java">
        <input>
       
        </input>
      </program>
  </section>
</chapter>

